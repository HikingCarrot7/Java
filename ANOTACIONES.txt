#===================================================CONSULTAS DE SELECCIÓN===================================================#
#--------------------------------------------------------------------------------------------------------------------------#
-PARA CREAR FILTROS BASICOS 

1.-SELECT * FROM `PRODUCTOS` WHERE SECCIÓN = 'DEPORTES'

2.- SELECT * FROM `PRODUCTOS` WHERE PRECIO >= 300


#--------------------------------------------------------------------------------------------------------------------------#

-SE USAN LAS PALABRAS ASC Y DSC PARA ORDENAR LOS REGISTROS



#--------------------------------------------------------------------------------------------------------------------------#

-PARA APLICAR NIVELES DE FILTROS A UNA TABLA (ORDER BY)

1- SELECT * FROM `PRODUCTOS` ORDER BY `PRODUCTOS`.`SECCIÓN`, `PRODUCTOS`.`PAÍS DE ORIGEN`, `PRODUCTOS`.`PRECIO`



#--------------------------------------------------------------------------------------------------------------------------#

-PARA CREAR AGRUPACIONES (TIPO SUBTOTALES EN EXCEL)

SI SOLO QUIERES TENER UNA SUBGRUPO DE UN GRUPO SE USA LA CLAUSULA 'HAVING'

ALGUNOS EJEMPLOS:

1. SELECT SECCIÓN, AVG(PRECIO) AS PROMEDIO_PRECIO FROM `PRODUCTOS` GROUP BY SECCIÓN HAVING SECCIÓN = 'DEPORTES' OR SECCIÓN = 'CERÁMICA' ORDER BY PROMEDIO_PRECIO

2. SELECT `POBLACIÓN`, COUNT(TELÉFONO) AS N_CLIENTES FROM CLIENTES GROUP BY POBLACIÓN HAVING `POBLACIÓN` = 'MADRID' <- OPCIONAL

3. SELECT SECCIÓN, AVG(PRECIO) AS MEDIA_POR_SECCION FROM PRODUCTOS WHERE SECCIÓN <> 'JUGUETERÍA' GROUP BY SECCIÓN




#--------------------------------------------------------------------------------------------------------------------------#

- PARA SELECCIONAR DATOS QUE TIENEN UNA SUBSTRING DETERMINADO

1. SELECT * FROM CLIENTES WHERE EMPRESA LIKE '%IA' OR EMPRESA LIKE %ER%

#--------------------------------------------------------------------------------------------------------------------------#

-PARA CREAR CAMPOS CALCULADOS

1. SELECT NOMBREARTÍCULO, SECCIÓN, PRECIO, ROUND(PRECIO*0.85, 2) AS PRECIO_DESCUENTO FROM PRODUCTOS ORDER BY SECCIÓN



#--------------------------------------------------------------------------------------------------------------------------#

- MANEJO DE FECHAS BASICO

1. SELECT *, DATE_FORMAT(NOW(), '%D-%M-%Y') AS FECHA_HOY, DATEDIFF(NOW(), FECHA) AS DIAS_TRANSCURRIDOS FROM `productos`



#--------------------------------------------------------------------------------------------------------------------------# // EN ESTE MODULO VIMOS LAS RELACIONES ENTRE TABLAS EN PHPMYADMIN (VER SQL3)

- INNER JOIN -> SE USA PARA MOSTRAR LOS REGISTROS QUE TENGAN INFORMACION RELACIONADA EN LAS DOS TABLAS (EN LA INSTRUCCION 'ON' SE ESPECIFICA LOS CAMPOS POR LOS CUALES RELACIONADAS LAS DOS TABLAS)

- INNER LEFT -> MUESTRA TODOS LOS REGISTROS DE LA TABLA A (EN ESTA CASO LA TABLA DE CLIENTES) SIN IMPORTAR QUE LOS REGISTROS TENGAN UNA RELACION ENTRE AMBAS TABLAS

- INNER RIGHT -> LO MISMO QUE INNER LEFT, PERO MOSTRARA LOS TODOS LOS REGISTROS DE LA TABLA B (EN ESTE CASO PRECIOS) [POR LA NATURALEZA DE ESTAS TABLAS ESTA RELACION NO SE PUEDE DAR PORQUE NO PUEDEN VER
REGISTROS EN LA TABLA DE PEDIDOS DE CLIENTES QUE NO EXISTAN]


1. SELECT * FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE = PEDIDOS.CÓDIGOCLIENTE WHERE POBLACIÓN = 'MADRID' ORDER BY CLIENTES.EMPRESA -> ESTA CONSULTA ME DEVUELVE LOS CLIENTES QUE HAN 
HECHO ALGUN PEDIDO


2. SELECT
  CLIENTES.CÓDIGOCLIENTE,
  POBLACIÓN,
  DIRECCIÓN,
  EMPRESA,
  NÚMERODEPEDIDO,
  PEDIDOS.CÓDIGOCLIENTE,
  FORMADEPAGO
FROM
  CLIENTES
LEFT JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE = PEDIDOS.CÓDIGOCLIENTE WHERE PEDIDOS.NÚMERODEPEDIDO IS NULL -> LA SIGUIENTE CONSULTA NOS MUESTRA AQUELLOS CLIENTES QUE NO HAN HECHO NINGUN PEDIDO


#--------------------------------------------------------------------------------------------------------------------------#

SUBCONSULTAS ESCALONADAS -> EL SELECT HIJO DEVUELVE UNA UNICA CONSULTA (EN ESTE CASO EL PROMEDIO) PARA USARSE EN LA CONSULTA PADRE

1. SELECT * FROM PRODUCTOS WHERE PRECIO > (SELECT AVG(PRECIO) AS PROMEDIO_PRECIO FROM PRODUCTOS)

2. SELECT * FROM PRODUCTOS WHERE PRECIO > (SELECT MAX(PRECIO) AS MAX_PRECIO FROM PRODUCTOS WHERE SECCIÓN = 'JUGUETERÍA')



SUBCONSULTAS DE LISTA -> EL SELECT HIJO DEVUELVE UNA LISTA DE CONSULTAS QUE PODEMOS USAR EN EL SELECT PADRE

1. SELECT * FROM PRODUCTOS WHERE PRECIO > ALL (SELECT PRECIO FROM PRODUCTOS WHERE SECCIÓN = 'CERÁMICA') -> LA SIGUIENTE CONSULTA NOS DEVUELVE LOS PRECIOS QUE SON MAYORES A TODOS LOS PRECIOS DE
CERAMICA (SUPONGAMOS QUE LA CONSULTA HIJO NOS DEVUELVE LA LISTA {70, 56, 909, 23, 6}, LA CONSULTA PADRE NOS DEVOLVERA TODOS LOS PRECIOS QUE SEAN MAYORES AL MAYOR DE LA LISTA [EN ESTE CASO 909])

2. SELECT * FROM PRODUCTOS WHERE PRECIO > ANY (SELECT PRECIO FROM PRODUCTOS WHERE SECCIÓN = 'CERÁMICA') -> LA SIGUIENTE CONSULTA NOS DEVUELVE LOS PRECIOS QUE SON MAYORES A CUALQUIERA DE LOS PRECIOS DE
CERAMICA (SUPONGAMOS QUE LA CONSULTA HIJO NOS DEVUELVE LA LISTA {70, 56, 909, 23, 6}, LA CONSULTA PADRE NOS DEVOLVERA TODOS LOS PRECIOS QUE SEAN MAYORES AL MENOR DE LA LISTA [EN ESTE CASO 6])





#--------------------------------------------------------------------------------------------------------------------------#

IN -> COMPARA SI UN CAMPO SE ENCUENTRA DENTRO DE LA LISTA DE UNA SUBCONSULTA

NOT IN -> JUSTO LO CONTRARIO QUE EL OPERADOR 'IN'

1. SELECT NOMBREARTÍCULO, PRECIO FROM PRODUCTOS WHERE CÓDIGOARTÍCULO IN (SELECT CÓDIGOARTÍCULO FROM PRODUCTOSPEDIDOS WHERE UNIDADES >= 30) -> LA SUBCONSULTA NOS DEVUELVE LOS CÓDIGOARTÍCULO CUYAS UNIDADES
SON MAYORES DE 30 Y SEGUIDO EL OPERADOR 'IN' REVISA QUE LOS CÓDIGOARTÍCULO DE PRODUCTOS QUE SE ENCUENTREN EN ESTA LISTA (LAS TABLAS NO NECESITAN ESTAR RELACIONADAS PARA REALIZAR ESTE TIPO DE CONSULTAS)


{OTRA FORMA DE HACERLO SIN USAR EL OPERADOR 'IN'}
2. SELECT NOMBREARTÍCULO, PRECIO FROM PRODUCTOS INNER JOIN PRODUCTOSPEDIDOS ON PRODUCTOS.CÓDIGOARTÍCULO = PRODUCTOSPEDIDOS.CÓDIGOARTÍCULO WHERE UNIDADES >= 30 (LAS TABLAS NO NECESITAN ESTAR RELACIONADAS EN SQL)



3. SELECT EMPRESA, POBLACIÓN FROM CLIENTES WHERE CÓDIGOCLIENTE NOT IN (SELECT CÓDIGOCLIENTE FROM PEDIDOS WHERE FORMADEPAGO ='TARJETA' ) -> NOS DEVUELVE LAS EMPRESAS QUE NO HAN PAGADO CON TARJETA O QUE 
NO HAN HECHO ALGUN PEDIDO


#======================================================CONSULTAS DE ACCIÓN======================================================#
#--------------------------------------------------------------------------------------------------------------------------#

UPDATE -> ACTUALIZA O CAMBIA LOS DATOS DE UNA COLUMNA

1. UPDATE PRODUCTOS SET PRECIO = PRECIO - 10 WHERE SECCIÓN = 'DEPORTES' -> QUITAMOS 10$ A LOS PRECIO DE LA SECCIÓN DE DEPORTES

2. UPDATE PRODUCTOS SET SECCIÓN = 'DEPORTIVOS' WHERE SECCIÓN = 'DEPORTES' -> CAMBIAMOS EL NOMBRE DE LA SECCIÓN DEPORTES POR DEPORTIVOS



#--------------------------------------------------------------------------------------------------------------------------#

INTO -> CREAR UN NUEVA TABLA

1. SELECT * INTO CLIENTES_MADRID FROM CLIENTES WHERE POBLACIÓN = 'MADRID' -> ESTO ES VÁLIDO PARA ACCESS

{PARA MYSQL}

CREATE TABLE -> CREAR UNA NUEVA TABLA (MYSQL)

2. CREATE TABLE CLIENTES_MADRID SELECT * FROM CLIENTES WHERE POBLACIÓN = 'MADRID' -> CREAR UNA NUEVA TABLA CON LOS SOLAMENTE LOS CLIENTES QUE SEAN DE MADRID



#--------------------------------------------------------------------------------------------------------------------------#

DELETE -> BORRAR REGISTROS DE UNA BASE DE DATOS

1. DELETE FROM CLIENTES WHERE POBLACIÓN = 'MADRID'-> BORRA LOS REGISTROS DE QUE TENGAN DE POBLACIÓN MADRID

2. DELETE FROM PRODUCTOS WHERE SECCIÓN = 'DEPORTIVOS' AND PRECIO BETWEEN 50 AND 100 -> BORRA LOS ARTÍCULOS QUE PERTENECEN A LA SECCIÓN DE DEPORTIVOS CUYOS PRECIOS ESTÁN ENTRE 50$ Y 100$

3. DELETE DISTINCTROW CLIENTES.*, PEDIDOS.CÓDIGOCLIENTE FROM CLIENTES LEFT JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE = PEDIDOS.CÓDIGOCLIENTE WHERE PEDIDOS.CÓDIGOCLIENTE IS NULL -> BORRA A LOS CLIENTES QUE
NO TENGAN NINGÚN PEDIDO EN LA TABLA DE PEDIDOS


#======================================================ANOTACIONES EXTRAS======================================================#
#--------------------------------------------------------------------------------------------------------------------------#
VISTO EN ACCESS 

UNION - NO REPITE LOS DATOS
UNION ALL - REPITE LOS DATOS

1. SELECT * FROM PRODUCTOS WHERE PRECIO > 300

UNION ALL 

SELECT * FROM CLIENTES WHERE `POBLACIÓN` = 'MADRID'

#--------------------------------------------------------------------------------------------------------------------------#
/*PARA MOSTRAR LAS PROCEDENCIAS DE LOS DATOS*/

1. SELECT [NOMBRE ARTÍCULO], SECCIÓN, PRECIO, [PAÍS DE ORIGEN], 'PRODUCTOS' AS PROCEDENCIA 

FROM PRODUCTOS

WHERE PRECIO > 250

UNION ALL SELECT [NOMBRE ARTÍCULO], SECCIÓN, PRECIO, [PAÍS DE ORIGEN], 'PRODUCTOS2' AS PROCEDENCIA 

FROM PRODUCTOS2

WHERE [PAÍS DE ORIGEN] = 'ITALIA';

#--------------------------------------------------------------------------------------------------------------------------#
DISTINCT -> SE USA PARA NO MOSTRAR INFORMACION REPETIDA CUANDO SE TRABAJA CON INNER JOIN EJEMPLO:

1. SELECT DISTINCT EMPRESA FROM CLIENTES INNER JOIN PEDIDOS ON CLIENTES.CÓDIGOCLIENTE = PEDIDOS.CÓDIGOCLIENTE ORDER BY EMPRESA DESC -> SIN EL 'DISTINCT' LA CONSULTA NOS REGRESARÁ VALORES REPETIDOS DE
CADA EMPRESA PORQUE HAY EMPRESAS QUE HAN HECHO VARIOS PEDIDOS (CON EL 'DISTINCT'EVITAMOS LOS VALORES REPETIDOS)

DISTINCTROW -> SE USA PARA NO REPETIR REGISTROS QUE SEAN EXACTAMENTE IGUALES EN UNA CONSULTA