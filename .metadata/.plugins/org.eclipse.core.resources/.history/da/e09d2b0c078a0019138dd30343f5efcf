package examenlisteners;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.util.EventListener;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class MiFrame extends JFrame implements WindowStateListener, WindowListener, WindowFocusListener
{
	private static final long serialVersionUID = 1L;
	
	Lamina lamina;

	public MiFrame()
	{
		lamina = new Lamina();
		
		setResizable(true);
		setSize(1000, 1000);
		setLocationRelativeTo(null);
		add(lamina,BorderLayout.CENTER);
		addMouseMotionListener(lamina);
		addMouseListener(lamina);
		addWindowListener(this);
		addWindowStateListener(this);
		addWindowFocusListener(this);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
		
		JPanel botones = new JPanel();
		anadirBotones(botones);
		
		/*ponerBotones(botones, "Sample test", new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				System.exit(0);
			}
		});*/
		
		
		add(botones, BorderLayout.SOUTH);
		
	}
	
	public void anadirBotones(JPanel boton) 
	{
		AccionBotones accion = new AccionBotones("Close", "Cerrar programa");
		
		boton.add(new JButton(accion));
		
	}
	
	/*public void ponerBotones(Container c, String titulo, ActionListener oyente) 
	{
		JButton boton = new JButton(titulo);
		
		c.add(boton);
		
		boton.addActionListener(oyente);
	}*/
	
	private class AccionBotones extends AbstractAction
	{
		
		private static final long serialVersionUID = 1L;

		public AccionBotones(String titulo, String accion)
		{
			putValue(Action.NAME, titulo);
			putValue(Action.SHORT_DESCRIPTION, "Desactiva las animaciones");
			putValue("Accion", accion);
		}
		
		@Override
		public void actionPerformed(ActionEvent e) 
		{
			String accion = "";
			
			accion = (String) getValue("Accion");
			
			if(accion.contentEquals("Cerrar programa")) 
			{
				lamina.apagar();
			}
			

		}
	}

	public static void main(String[] args) 
	{
		new MiFrame();

	}

	@Override
	public void windowStateChanged(WindowEvent e) 
	{
		if(e.getNewState() == Frame.MAXIMIZED_BOTH) 
		{
			lamina.generarCircular();
		}
		
		if(e.getOldState() == Frame.MAXIMIZED_BOTH) 
		{
			lamina.generarCircular();
		}
	}

	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosing(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowDeiconified(WindowEvent e) 
	{
		lamina.generarZoom();
	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowGainedFocus(WindowEvent e) 
	{
		setTitle("");
		
	}

	@Override
	public void windowLostFocus(WindowEvent e) 
	{
		setTitle("I have many thing to show you");
		lamina.generarCirculos();
		
	}
}
