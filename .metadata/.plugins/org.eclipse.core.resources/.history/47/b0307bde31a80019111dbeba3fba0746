package carreradecaballos;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;

public class Hipodromo extends JPanel implements Observer
{
	private static final long serialVersionUID = 1L;
	
	private JProgressBar[] caballosBars;
	private JLabel[] nombres;
	private JLabel nomGanador;
	private JPanel carrera, ganador, iniciar;
	private JButton dale;
	private Caballos[] caballos;
	private Thread[] threads;
	
	public Hipodromo() 
	{
		setLayout(new BorderLayout());
		
		iniciarElementos();
		
		anadirElementos();
		
		add(carrera, BorderLayout.CENTER);
		add(ganador, BorderLayout.NORTH);
		add(iniciar, BorderLayout.SOUTH);
	}
	
	public void iniciarElementos() 
	{
		carrera = new JPanel();
		carrera.setLayout(new Diseno());
		
		nombres = new JLabel[4];
		caballosBars = new JProgressBar[4];
		
		ganador = new JPanel();
		nomGanador =  new JLabel("El ganador es: ");
	
		iniciar = new JPanel();
		dale = new JButton("Dale!");
		
		accionBoton();
	}
	
	public void anadirElementos() 
	{
		for (int i = 0; i < nombres.length; i++) 
		{
			nombres[i] = new JLabel("Caballo: " + (i + 1));
			carrera.add(nombres[i]);
			
			caballosBars[i] = new JProgressBar();
			caballosBars[i].setStringPainted(true);
			caballosBars[i].setString("0%");
			carrera.add(caballosBars[i]);
		}
		
		ganador.add(nomGanador);
		
		iniciar.add(dale);
		
	}
	
	public void accionBoton() 
	{
		dale.addActionListener((ActionEvent e) ->
		{
			threads = new Thread[4];
			
			for (int i = 0; i < caballos.length; i++) 
			{
				caballos[i] = new Caballos((i+1) + "");
				
				threads[i] = new Thread(caballos[i]);
				
				threads[i].start();
				
			}
			
		});
		
	}
	
	@Override
	public void update(Observable o, Object obj) 
	{
		int index = Integer.parseInt(((Caballos) o).getNombre());
		
		caballosBars[index].setValue((int) obj);
		
		if((int) obj >= 100)
			for (int i = 0; i < threads.length; i++) 
				threads[i].interrupt();
	}
	
	private class Diseno implements LayoutManager
	{

		@Override
		public void layoutContainer(Container c) 
		{
			int x = 20, y = 50;
			
			for (int i = 0; i < c.getComponentCount(); i++) 
			{
				if(i + 1 % 2 == 0) 
					c.getComponent(i).setBounds(x, y, 100, 50);
					
				else 
					c.getComponent(i).setBounds(x, y, 350, 30);

				x += 80;
				
				if(i % 2 != 0) 
				{
					y += 100;
					x = 20;
				}
				
			}
			
		}
		
		@Override
		public void addLayoutComponent(String name, Component comp) {}

		@Override
		public Dimension minimumLayoutSize(Container parent) 
		{
			return null;
		}

		@Override
		public Dimension preferredLayoutSize(Container parent) 
		{
			return null;
		}

		@Override
		public void removeLayoutComponent(Component comp) {}
		
	}

}
