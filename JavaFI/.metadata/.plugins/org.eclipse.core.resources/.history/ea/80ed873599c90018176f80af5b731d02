package snake;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Gameplay extends JPanel implements KeyListener, ActionListener{
	
	private int [] snakeXlength = new int[750]; 
	private int [] snakeYlength = new int[750]; 
	
	private boolean left = false;
	private boolean right = false;
	private boolean up = false;
	private boolean down = false;
	
	private ImageIcon rightmouth;
	private ImageIcon upmouth;
	private ImageIcon downmouth;
	private ImageIcon leftmouth;
	private ImageIcon snakeimage;
	private ImageIcon titleImage;
	
	private int lengthofsnake = 3;
	private int moves = 0;
	
	private Timer timer;
	private int delay = 100;
	
	public Gameplay () {
		
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		timer = new Timer (delay, this);
		timer.start();
	}
	
	public void paint (Graphics g) {
		
		if(moves == 0) {
			snakeXlength[2] = 50;
			snakeXlength[1] = 75;
			snakeXlength[0] = 100;
			
			snakeYlength[2] = 100;
			snakeYlength[1] = 100;
			snakeYlength[0] = 100;
		}
		
		// draw title image border
		g.setColor(Color.white);
		g.drawRect(24, 10, 851, 55);
		
		// draw the title image 
		titleImage = new ImageIcon("snaketitle.jpg");
		titleImage.paintIcon(this, g, 25, 11);
		
		// draw border for gameplay
		g.setColor(Color.WHITE);
		g.drawRect(24, 74, 851, 577);
		
		// draw background for the gameplay
		g.setColor(Color.black);
		g.fillRect(25, 75, 850, 575);
		
		rightmouth = new ImageIcon("rightmouth.png");
		rightmouth.paintIcon(this, g, snakeXlength[0], snakeYlength[0]);
		
		for(int a = 0; a < lengthofsnake; a++) {
			
			if(a == 0 && right) {
				rightmouth = new ImageIcon("rightmouth.png");
				rightmouth.paintIcon(this, g, snakeXlength[a], snakeYlength[a]);
				
			}
			if(a == 0 && left) {
				leftmouth = new ImageIcon("leftmouth.png");
				leftmouth.paintIcon(this, g, snakeXlength[a], snakeYlength[a]);
				
			}
			if(a == 0 && up) {
				upmouth = new ImageIcon("upmouth.png");
				upmouth.paintIcon(this, g, snakeXlength[a], snakeYlength[a]);
				
			}
			if(a == 0 && down) {
				downmouth = new ImageIcon("downmouth.png");
				downmouth.paintIcon(this, g, snakeXlength[a], snakeYlength[a]);
				
			}
			if(a != 0) {
				snakeimage = new ImageIcon("snakeimage.png");
				snakeimage.paintIcon(this, g, snakeXlength[a], snakeYlength[a]);
				
			}
		}
		g.dispose();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
		timer.start();
		
		if (right) {
			
			for(int r = lengthofsnake -1; r >= 0; r--) {
				
				snakeYlength[r+1] = snakeYlength[r];
			}
			
			for(int r = lengthofsnake ; r >= 0; r--) {
				
				if(r == 0) {
					
					snakeXlength[r] = snakeXlength[r] + 25;
				} else {
					
					snakeXlength[r] = snakeXlength[r-1];
				}
				if (snakeXlength[r] > 850) {
					
					snakeXlength[r] = 25;
				}
			}
			
			repaint();
		}
		if (left) {
			
			for(int r = lengthofsnake -1; r >= 0; r--) {
				
				snakeYlength[r+1] = snakeYlength[r];
			}
			
			for(int r = lengthofsnake ; r >= 0; r--) {
				
				if(r == 0) {
					
					snakeXlength[r] = snakeXlength[r] - 25;
				} else {
					
					snakeXlength[r] = snakeXlength[r-1];
				}
				if (snakeXlength[r] < 25 ) {
					
					snakeXlength[r] = 850;
				}
			}
			
			repaint();
		}
		if (up) {
			
			for(int r = lengthofsnake -1; r >= 0; r--) {
				
				snakeXlength[r+1] = snakeXlength[r];
			}
			
			for(int r = lengthofsnake ; r >= 0; r--) {
				
				if(r == 0) {
					
					snakeYlength[r] = snakeYlength[r] + 25;
				} else {
					
					snakeYlength[r] = snakeYlength[r-1];
				}
				if (snakeYlength[r] < 75) {
					
					snakeYlength[r] = 625;
				}
			}
			
			repaint();
		}
		if (down) {
			
			for(int r = lengthofsnake -1; r >= 0; r--) {
				
				snakeXlength[r+1] = snakeXlength[r];
			}
			
			for(int r = lengthofsnake ; r >= 0; r--) {
				
				if(r == 0) {
					
					snakeYlength[r] = snakeYlength[r] + 25;
				} else {
					
					snakeYlength[r] = snakeYlength[r-1];
				}
				if (snakeYlength[r] > 625) {
					
					snakeYlength[r] = 75;
				}
			}
			
			repaint();
		}
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		
		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			
			moves++;
			right = true;
			
			if (!left) {
				
				right = true;
				
			} else {
				
				left = true;
				right = false;
				
			}
			up = false;
			down = false;
		}
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			
			moves++;
			left = true;
			
			if (!right) {
				
				left = true;
				
			} else {
				
				right = true;
				left = false;
				
			}
			up = false;
			down = false;
		}
		if(e.getKeyCode() == KeyEvent.VK_UP) {
			
			moves++;
			up = true;
			
			if (!down) {
				
				up = true;
				
			} else {
				
				down = true;
				up = false;
				
			}
			right = false;
			left = false;
		}
		if(e.getKeyCode() == KeyEvent.VK_DOWN) {
			
			moves++;
			down = true;
			
			if (!up) {
				
				down = true;
				
			} else {
				
				up = true;
				down = false;
				
			}
			right = false;
			left = false;
		}
		
		
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
